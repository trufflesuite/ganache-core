{
	"id": 0,
	"name": "@ganache/ethereum",
	"kind": 0,
	"kindString": "Project",
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "default",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 3,
							"name": "new default",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "This is the Ethereum API that the provider interacts with.\nThe only methods permitted on the prototype are the supported json-rpc\nmethods."
							},
							"parameters": [
								{
									"id": 4,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "EthereumInternalOptions"
									}
								},
								{
									"id": 5,
									"name": "wallet",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "default"
									}
								},
								{
									"id": 6,
									"name": "emitter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 7,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 9,
															"name": "connect",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "ethereum/src/api.ts",
																	"line": 174,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "undefined"
															}
														},
														{
															"id": 10,
															"name": "disconnect",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "ethereum/src/api.ts",
																	"line": 175,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "undefined"
															}
														},
														{
															"id": 8,
															"name": "message",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "ethereum/src/api.ts",
																	"line": 173,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																9,
																10,
																8
															]
														}
													]
												}
											},
											{
												"type": "intersection",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 11,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 13,
																	"name": "connect",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "ethereum/src/api.ts",
																			"line": 174,
																			"character": 13
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																},
																{
																	"id": 14,
																	"name": "disconnect",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "ethereum/src/api.ts",
																			"line": 175,
																			"character": 16
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "undefined"
																	}
																},
																{
																	"id": 12,
																	"name": "message",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "ethereum/src/api.ts",
																			"line": 173,
																			"character": 13
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		13,
																		14,
																		12
																	]
																}
															]
														}
													},
													{
														"type": "reference",
														"name": "OmnipresentEventData"
													}
												]
											},
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "message"
													},
													{
														"type": "literal",
														"value": "connect"
													},
													{
														"type": "literal",
														"value": "disconnect"
													}
												]
											}
										],
										"name": "Emittery"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "default"
							}
						}
					]
				},
				{
					"id": 21,
					"name": "#blockchain",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 158,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "default"
					}
				},
				{
					"id": 18,
					"name": "#common",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 155,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "default"
					}
				},
				{
					"id": 19,
					"name": "#filters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 156,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "Filter"
							}
						],
						"name": "Map"
					},
					"defaultValue": "..."
				},
				{
					"id": 15,
					"name": "#getId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 154,
							"character": 17
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 16,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 17,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Quantity"
									}
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 22,
					"name": "#options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 159,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "EthereumInternalOptions"
					}
				},
				{
					"id": 20,
					"name": "#subscriptions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 157,
							"character": 25
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "UnsubscribeFn"
							}
						],
						"name": "Map"
					},
					"defaultValue": "..."
				},
				{
					"id": 23,
					"name": "#wallet",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 160,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "default"
					}
				},
				{
					"id": 42,
					"name": "bzz_hive",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 256,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "bzz_hive",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 44,
					"name": "bzz_info",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 261,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 45,
							"name": "bzz_info",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 38,
					"name": "db_getHex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 249,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 39,
							"name": "db_getHex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns binary data from the local database",
								"returns": "The previously stored data.\n"
							},
							"parameters": [
								{
									"id": 40,
									"name": "dbName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Database name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 41,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Key name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 29,
					"name": "db_getString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 224,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 30,
							"name": "db_getString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns string from the local database",
								"returns": "The previously stored string.\n"
							},
							"parameters": [
								{
									"id": 31,
									"name": "dbName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Database name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 32,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Key name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 33,
					"name": "db_putHex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 237,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 34,
							"name": "db_putHex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stores binary data in the local database.",
								"returns": "true if the value was stored, otherwise false.\n"
							},
							"parameters": [
								{
									"id": 35,
									"name": "dbName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Database name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 36,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Key name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 37,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Data to store."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 24,
					"name": "db_putString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 212,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "db_putString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stores a string in the local database.",
								"returns": "returns true if the value was stored, otherwise false.\n"
							},
							"parameters": [
								{
									"id": 26,
									"name": "dbName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Database name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 27,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Key name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 28,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to store."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 306,
					"name": "debug_traceTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1907,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 307,
							"name": "debug_traceTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempt to run the transaction in the exact same manner as it was executed\non the network. It will replay any transaction that may have been executed\nprior to this one before it will finally attempt to execute the transaction\nthat corresponds to the given hash.",
								"text": "In addition to the hash of the transaction you may give it a secondary\noptional argument, which specifies the options for this specific call.\nThe possible options are:\n\n* `disableStorage`: {boolean} Setting this to `true` will disable storage capture (default = `false`).\n* `disableMemory`: {boolean} Setting this to `true` will disable memory capture (default = `false`).\n* `disableStack`: {boolean} Setting this to `true` will disable stack capture (default = `false`).\n",
								"returns": "returns comment",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Simple.sol\n// // SPDX-License-Identifier: MIT\n//  pragma solidity ^0.7.4;\n//\n//  contract Simple {\n//      uint256 public value;\n//      constructor() payable {\n//          value = 5;\n//      }\n//  }\nconst simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\nconst [from] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconst transactionTrace = await provider.request({ method: \"debug_traceTransaction\", params: [txHash] });\nconsole.log(transactionTrace);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 308,
									"name": "transactionHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 309,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "TransactionTraceOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 310,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 311,
													"name": "gas",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 313,
													"name": "returnValue",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 312,
													"name": "structLogs",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "StructLog"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														311,
														313,
														312
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 173,
					"name": "eth_accounts",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1033,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 174,
							"name": "eth_accounts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list of addresses owned by client.",
								"returns": "Array of 20 Bytes - addresses owned by the client.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 175,
					"name": "eth_blockNumber",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1042,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 176,
							"name": "eth_blockNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of the most recent block.",
								"returns": "integer of the current block number the client is on.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 302,
					"name": "eth_call",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1805,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 303,
							"name": "eth_call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Executes a new message call immediately without creating a transaction on the block chain.",
								"returns": "the return value of executed contract.\n"
							},
							"parameters": [
								{
									"id": 304,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 305,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 177,
					"name": "eth_chainId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1059,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 178,
							"name": "eth_chainId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the currently configured chain id, a value used in\nreplay-protected transaction signing as introduced by EIP-155.",
								"returns": "The chain id as a string.",
								"tags": [
									{
										"tag": "eip",
										"text": "[155 – Simple replay attack protection](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md)\n"
									},
									{
										"tag": "example",
										"text": "\n```javascript\nconst chainId = await provider.send(\"eth_chainId\");\nconsole.log(chainId);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 115,
					"name": "eth_coinbase",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 815,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 116,
							"name": "eth_coinbase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the client coinbase address.",
								"returns": "20 bytes - the current coinbase address.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Address"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 107,
					"name": "eth_estimateGas",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 732,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 108,
							"name": "eth_estimateGas",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates and returns an estimate of how much gas is necessary to allow the\ntransaction to complete. The transaction will not be added to the\nblockchain. Note that the estimate may be significantly more than the\namount of gas actually used by the transaction, for a variety of reasons\nincluding EVM mechanics and node performance.",
								"returns": "the amount of gas used.\n"
							},
							"parameters": [
								{
									"id": 109,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 110,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 171,
					"name": "eth_gasPrice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1024,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 172,
							"name": "eth_gasPrice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current price per gas in wei.",
								"returns": "integer of the current gas price in wei.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 179,
					"name": "eth_getBalance",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1070,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 180,
							"name": "eth_getBalance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the balance of the account of given address."
							},
							"parameters": [
								{
									"id": 181,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "20 Bytes - address to check for balance."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 182,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "integer block number, or the string \"latest\", \"earliest\"\n or \"pending\", see the default block parameter\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Buffer"
											},
											{
												"type": "reference",
												"name": "EARLIEST"
											},
											{
												"type": "reference",
												"name": "LATEST"
											},
											{
												"type": "reference",
												"name": "PENDING"
											}
										]
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 121,
					"name": "eth_getBlockByHash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 842,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 122,
							"name": "eth_getBlockByHash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a block by block hash.",
								"returns": "Block\n"
							},
							"parameters": [
								{
									"id": 123,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								},
								{
									"id": 124,
									"name": "transactions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Boolean - If true it returns the full transaction objects, if false only the hashes of the\ntransactions."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 117,
					"name": "eth_getBlockByNumber",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 828,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 118,
							"name": "eth_getBlockByNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a block by block number.",
								"returns": "the block, `null` if the block doesn't exist.\n"
							},
							"parameters": [
								{
									"id": 119,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "QUANTITY|TAG - integer of a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the\ndefault block parameter."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								},
								{
									"id": 120,
									"name": "transactions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Boolean - If true it returns the full transaction objects, if false only the hashes of the\ntransactions."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 128,
					"name": "eth_getBlockTransactionCountByHash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 870,
							"character": 42
						}
					],
					"signatures": [
						{
							"id": 129,
							"name": "eth_getBlockTransactionCountByHash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of transactions in a block from a block matching the given block hash."
							},
							"parameters": [
								{
									"id": 130,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "DATA, 32 Bytes - hash of a block.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 125,
					"name": "eth_getBlockTransactionCountByNumber",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 855,
							"character": 44
						}
					],
					"signatures": [
						{
							"id": 126,
							"name": "eth_getBlockTransactionCountByNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of transactions in a block from a block matching the given block number."
							},
							"parameters": [
								{
									"id": 127,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "QUANTITY|TAG - integer of a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the\ndefault block parameter.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 183,
					"name": "eth_getCode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1089,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 184,
							"name": "eth_getCode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns code at a given address.",
								"returns": "the code from the given address.\n"
							},
							"parameters": [
								{
									"id": 185,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "20 Bytes - address"
									},
									"type": {
										"type": "reference",
										"name": "Buffer"
									}
								},
								{
									"id": 186,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "integer block number, or the string \"latest\", \"earliest\" or \"pending\", see the default block\nparameter"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Buffer"
											},
											{
												"type": "reference",
												"name": "EARLIEST"
											},
											{
												"type": "reference",
												"name": "LATEST"
											},
											{
												"type": "reference",
												"name": "PENDING"
											}
										]
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 131,
					"name": "eth_getCompilers",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 880,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 132,
							"name": "eth_getCompilers",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 266,
					"name": "eth_getFilterChanges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1680,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 267,
							"name": "eth_getFilterChanges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Polling method for a filter, which returns an array of logs, block hashes,\nor transaction hashes, depending on the filter type, which occurred since\nlast poll.",
								"returns": "an array of logs, block hashes, or transaction hashes, depending\non the filter type, which occurred since last poll.\n"
							},
							"parameters": [
								{
									"id": 268,
									"name": "filterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the filter id."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Data"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 272,
					"name": "eth_getFilterLogs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1713,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 273,
							"name": "eth_getFilterLogs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array of all logs matching filter with given id.",
								"returns": "Array of log objects, or an empty array.\n"
							},
							"parameters": [
								{
									"id": 274,
									"name": "filterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 275,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 276,
														"name": "address",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 120,
																"character": 15
															}
														],
														"type": {
															"type": "reference",
															"name": "Address"
														}
													},
													{
														"id": 277,
														"name": "blockHash",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 121,
																"character": 17
															}
														],
														"type": {
															"type": "reference",
															"name": "Data"
														}
													},
													{
														"id": 278,
														"name": "blockNumber",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 122,
																"character": 19
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													},
													{
														"id": 279,
														"name": "data",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 123,
																"character": 12
															}
														],
														"type": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"name": "Data"
																	}
																}
															]
														}
													},
													{
														"id": 280,
														"name": "logIndex",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 124,
																"character": 16
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													},
													{
														"id": 281,
														"name": "removed",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 125,
																"character": 15
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "boolean"
														}
													},
													{
														"id": 282,
														"name": "topics",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 126,
																"character": 14
															}
														],
														"type": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"name": "Data"
																	}
																}
															]
														}
													},
													{
														"id": 283,
														"name": "transactionHash",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 127,
																"character": 23
															}
														],
														"type": {
															"type": "reference",
															"name": "Data"
														}
													},
													{
														"id": 284,
														"name": "transactionIndex",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 128,
																"character": 24
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"kind": 1024,
														"children": [
															276,
															277,
															278,
															279,
															280,
															281,
															282,
															283,
															284
														]
													}
												]
											}
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 285,
					"name": "eth_getLogs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1729,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 286,
							"name": "eth_getLogs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array of all logs matching a given filter object.",
								"returns": "Array of log objects, or an empty array.\n"
							},
							"parameters": [
								{
									"id": 287,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The filter options"
									},
									"type": {
										"type": "reference",
										"name": "FilterArgs"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 288,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 289,
														"name": "address",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 120,
																"character": 15
															}
														],
														"type": {
															"type": "reference",
															"name": "Address"
														}
													},
													{
														"id": 290,
														"name": "blockHash",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 121,
																"character": 17
															}
														],
														"type": {
															"type": "reference",
															"name": "Data"
														}
													},
													{
														"id": 291,
														"name": "blockNumber",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 122,
																"character": 19
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													},
													{
														"id": 292,
														"name": "data",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 123,
																"character": 12
															}
														],
														"type": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"name": "Data"
																	}
																}
															]
														}
													},
													{
														"id": 293,
														"name": "logIndex",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 124,
																"character": 16
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													},
													{
														"id": 294,
														"name": "removed",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 125,
																"character": 15
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "boolean"
														}
													},
													{
														"id": 295,
														"name": "topics",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 126,
																"character": 14
															}
														],
														"type": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"name": "Data"
																	}
																}
															]
														}
													},
													{
														"id": 296,
														"name": "transactionHash",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 127,
																"character": 23
															}
														],
														"type": {
															"type": "reference",
															"name": "Data"
														}
													},
													{
														"id": 297,
														"name": "transactionIndex",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/lib/src/things/blocklogs.d.ts",
																"line": 128,
																"character": 24
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"kind": 1024,
														"children": [
															289,
															290,
															291,
															292,
															293,
															294,
															295,
															296,
															297
														]
													}
												]
											}
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 187,
					"name": "eth_getStorageAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2",
								"max": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1143,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 188,
							"name": "eth_getStorageAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value from a storage position at a given address."
							},
							"parameters": [
								{
									"id": 189,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 190,
									"name": "position",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "bigint"
											}
										]
									}
								},
								{
									"id": 191,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "integer block number, or the string \"latest\", \"earliest\"\n or \"pending\", see the default block parameter\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 133,
					"name": "eth_getTransactionByBlockHashAndIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 890,
							"character": 45
						}
					],
					"signatures": [
						{
							"id": 134,
							"name": "eth_getTransactionByBlockHashAndIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a transaction by block hash and transaction index position."
							},
							"parameters": [
								{
									"id": 135,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "DATA, 32 Bytes - hash of a block."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								},
								{
									"id": 136,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "QUANTITY - integer of the transaction index position.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 137,
					"name": "eth_getTransactionByBlockNumberAndIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 909,
							"character": 47
						}
					],
					"signatures": [
						{
							"id": 138,
							"name": "eth_getTransactionByBlockNumberAndIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a transaction by block number and transaction index position."
							},
							"parameters": [
								{
									"id": 139,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "QUANTITY|TAG - a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the default\nblock parameter."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								},
								{
									"id": 140,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "QUANTITY - integer of the transaction index position.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 192,
					"name": "eth_getTransactionByHash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1206,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 193,
							"name": "eth_getTransactionByHash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the information about a transaction requested by transaction hash."
							},
							"parameters": [
								{
									"id": 194,
									"name": "transactionHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "32 Bytes - hash of a transaction\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 195,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 198,
													"name": "blockHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 124,
															"character": 17
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 199,
													"name": "blockNumber",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 125,
															"character": 19
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 201,
													"name": "from",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 127,
															"character": 12
														}
													],
													"type": {
														"type": "reference",
														"name": "Address"
													}
												},
												{
													"id": 204,
													"name": "gas",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 130,
															"character": 11
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 205,
													"name": "gasPrice",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 131,
															"character": 16
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 196,
													"name": "hash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 122,
															"character": 12
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 206,
													"name": "input",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 132,
															"character": 13
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 197,
													"name": "nonce",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 123,
															"character": 13
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 208,
													"name": "r",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 134,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 209,
													"name": "s",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 135,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 202,
													"name": "to",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 128,
															"character": 10
														}
													],
													"type": {
														"type": "reference",
														"name": "Address"
													}
												},
												{
													"id": 200,
													"name": "transactionIndex",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 126,
															"character": 24
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 207,
													"name": "v",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 133,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 203,
													"name": "value",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction.d.ts",
															"line": 129,
															"character": 13
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														198,
														199,
														201,
														204,
														205,
														196,
														206,
														197,
														208,
														209,
														202,
														200,
														207,
														203
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 298,
					"name": "eth_getTransactionCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1786,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 299,
							"name": "eth_getTransactionCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of transactions sent from an address.",
								"returns": "integer of the number of transactions sent from this address.\n"
							},
							"parameters": [
								{
									"id": 300,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 301,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "integer block number, or the string \"latest\", \"earliest\"\nor \"pending\", see the default block parameter"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Buffer"
											},
											{
												"type": "reference",
												"name": "EARLIEST"
											},
											{
												"type": "reference",
												"name": "LATEST"
											},
											{
												"type": "reference",
												"name": "PENDING"
											}
										]
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 210,
					"name": "eth_getTransactionReceipt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1233,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 211,
							"name": "eth_getTransactionReceipt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the receipt of a transaction by transaction hash.",
								"text": "Note That the receipt is not available for pending transactions.\n",
								"returns": "Returns the receipt of a transaction by transaction hash.\n"
							},
							"parameters": [
								{
									"id": 212,
									"name": "transactionHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "32 Bytes - hash of a transaction"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 213,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 217,
													"name": "blockHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 29,
															"character": 17
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 216,
													"name": "blockNumber",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 28,
															"character": 19
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 222,
													"name": "contractAddress",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 34,
															"character": 23
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 220,
													"name": "cumulativeGasUsed",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 32,
															"character": 25
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 218,
													"name": "from",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 30,
															"character": 12
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 221,
													"name": "gasUsed",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 33,
															"character": 15
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 223,
													"name": "logs",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 35,
															"character": 12
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reflection",
															"declaration": {
																"id": 224,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"children": [
																	{
																		"id": 225,
																		"name": "address",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 36,
																				"character": 19
																			}
																		],
																		"type": {
																			"type": "reference",
																			"name": "Address"
																		}
																	},
																	{
																		"id": 226,
																		"name": "blockHash",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 37,
																				"character": 21
																			}
																		],
																		"type": {
																			"type": "reference",
																			"name": "Data"
																		}
																	},
																	{
																		"id": 227,
																		"name": "blockNumber",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 38,
																				"character": 23
																			}
																		],
																		"type": {
																			"type": "reference",
																			"name": "Quantity"
																		}
																	},
																	{
																		"id": 228,
																		"name": "data",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 39,
																				"character": 16
																			}
																		],
																		"type": {
																			"type": "union",
																			"types": [
																				{
																					"type": "reference",
																					"name": "Data"
																				},
																				{
																					"type": "array",
																					"elementType": {
																						"type": "reference",
																						"name": "Data"
																					}
																				}
																			]
																		}
																	},
																	{
																		"id": 229,
																		"name": "logIndex",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 40,
																				"character": 20
																			}
																		],
																		"type": {
																			"type": "reference",
																			"name": "Quantity"
																		}
																	},
																	{
																		"id": 230,
																		"name": "removed",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 41,
																				"character": 19
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "boolean"
																		}
																	},
																	{
																		"id": 231,
																		"name": "topics",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 42,
																				"character": 18
																			}
																		],
																		"type": {
																			"type": "union",
																			"types": [
																				{
																					"type": "reference",
																					"name": "Data"
																				},
																				{
																					"type": "array",
																					"elementType": {
																						"type": "reference",
																						"name": "Data"
																					}
																				}
																			]
																		}
																	},
																	{
																		"id": 232,
																		"name": "transactionHash",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 43,
																				"character": 27
																			}
																		],
																		"type": {
																			"type": "reference",
																			"name": "Data"
																		}
																	},
																	{
																		"id": 233,
																		"name": "transactionIndex",
																		"kind": 1024,
																		"kindString": "Property",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
																				"line": 44,
																				"character": 28
																			}
																		],
																		"type": {
																			"type": "reference",
																			"name": "Quantity"
																		}
																	}
																],
																"groups": [
																	{
																		"title": "Properties",
																		"kind": 1024,
																		"children": [
																			225,
																			226,
																			227,
																			228,
																			229,
																			230,
																			231,
																			232,
																			233
																		]
																	}
																]
															}
														}
													}
												},
												{
													"id": 234,
													"name": "logsBloom",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 46,
															"character": 17
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 235,
													"name": "status",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 47,
															"character": 14
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 219,
													"name": "to",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 31,
															"character": 10
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 214,
													"name": "transactionHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 26,
															"character": 23
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 215,
													"name": "transactionIndex",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "utils/lib/src/things/transaction-receipt.d.ts",
															"line": 27,
															"character": 24
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														217,
														216,
														222,
														220,
														218,
														221,
														223,
														234,
														235,
														219,
														214,
														215
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 147,
					"name": "eth_getUncleByBlockHashAndIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 942,
							"character": 39
						}
					],
					"signatures": [
						{
							"id": 148,
							"name": "eth_getUncleByBlockHashAndIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a uncle of a block by hash and uncle index position."
							},
							"parameters": [
								{
									"id": 149,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "hash of a block"
									},
									"type": {
										"type": "reference",
										"name": "Data"
									}
								},
								{
									"id": 150,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the uncle's index position.\n"
									},
									"type": {
										"type": "reference",
										"name": "Quantity"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 151,
					"name": "eth_getUncleByBlockNumberAndIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 954,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 152,
							"name": "eth_getUncleByBlockNumberAndIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a uncle of a block by hash and uncle index position."
							},
							"parameters": [
								{
									"id": 153,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the default block\nparameter."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Buffer"
											},
											{
												"type": "reference",
												"name": "EARLIEST"
											},
											{
												"type": "reference",
												"name": "LATEST"
											},
											{
												"type": "reference",
												"name": "PENDING"
											}
										]
									}
								},
								{
									"id": 154,
									"name": "uncleIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the uncle's index position.\n"
									},
									"type": {
										"type": "reference",
										"name": "Quantity"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 141,
					"name": "eth_getUncleCountByBlockHash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 922,
							"character": 36
						}
					],
					"signatures": [
						{
							"id": 142,
							"name": "eth_getUncleCountByBlockHash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of uncles in a block from a block matching the given block hash."
							},
							"parameters": [
								{
									"id": 143,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "DATA, 32 Bytes - hash of a block.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 144,
					"name": "eth_getUncleCountByBlockNumber",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 931,
							"character": 38
						}
					],
					"signatures": [
						{
							"id": 145,
							"name": "eth_getUncleCountByBlockNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of uncles in a block from a block matching the given block hash."
							},
							"parameters": [
								{
									"id": 146,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 155,
					"name": "eth_getWork",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 971,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 156,
							"name": "eth_getWork",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns: An Array with the following elements\n1: DATA, 32 Bytes - current block header pow-hash\n2: DATA, 32 Bytes - the seed hash used for the DAG.\n3: DATA, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.",
								"returns": "the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n"
							},
							"parameters": [
								{
									"id": 157,
									"name": "filterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A filter id"
									},
									"type": {
										"type": "reference",
										"name": "Quantity"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "tuple"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 169,
					"name": "eth_hashrate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1015,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 170,
							"name": "eth_hashrate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of hashes per second that the node is mining with.",
								"returns": "number of hashes per second.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 167,
					"name": "eth_mining",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1005,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 168,
							"name": "eth_mining",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns `true` if client is actively mining new blocks.",
								"returns": "returns `true` if the client is mining, otherwise `false`.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 259,
					"name": "eth_newBlockFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1585,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 260,
							"name": "eth_newBlockFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a filter in the node, to notify when a new block arrives. To check\nif the state has changed, call `eth_getFilterChanges`.",
								"returns": "A filter id.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 263,
					"name": "eth_newFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0",
								"max": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1650,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 264,
							"name": "eth_newFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a filter object, based on filter options, to notify when the state\nchanges (logs). To check if the state has changed, call\n`eth_getFilterChanges`.",
								"text": "If the from `fromBlock` or `toBlock` option are equal to \"latest\" the\nfilter continually append logs for whatever block is seen as latest at the\ntime the block was mined, not just for the block that was \"latest\" when the\nfilter was created.\n\n### A note on specifying topic filters:\nTopics are order-dependent. A transaction with a log with topics [A, B]\nwill be matched by the following topic filters:\n * `[]` “anything”\n * `[A]` “A in first position (and anything after)”\n * `[null, B]` “anything in first position AND B in second position (and\nanything after)”\n * `[A, B]` “A in first position AND B in second position (and anything\nafter)”\n * `[[A, B], [A, B]]` “(A OR B) in first position AND (A OR B) in second\nposition (and anything after)”\n"
							},
							"parameters": [
								{
									"id": 265,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The filter options\n"
									},
									"type": {
										"type": "reference",
										"name": "RangeFilterArgs"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 261,
					"name": "eth_newPendingTransactionFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1607,
							"character": 39
						}
					],
					"signatures": [
						{
							"id": 262,
							"name": "eth_newPendingTransactionFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a filter in the node, to notify when new pending transactions\narrive. To check if the state has changed, call `eth_getFilterChanges`.",
								"returns": "A filter id.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 111,
					"name": "eth_protocolVersion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 793,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 112,
							"name": "eth_protocolVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current ethereum protocol version.",
								"returns": "The current ethereum protocol version.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 239,
					"name": "eth_sendRawTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1351,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 240,
							"name": "eth_sendRawTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates new message call transaction or a contract creation for signed transactions.",
								"returns": "The transaction hash\n"
							},
							"parameters": [
								{
									"id": 241,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 236,
					"name": "eth_sendTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1277,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 237,
							"name": "eth_sendTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates new message call transaction or a contract creation, if the data field contains code.",
								"returns": "The transaction hash\n"
							},
							"parameters": [
								{
									"id": 238,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 242,
					"name": "eth_sign",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1375,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 243,
							"name": "eth_sign",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The sign method calculates an Ethereum specific signature with:\n`sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + message.length + message)))`.",
								"text": "By adding a prefix to the message makes the calculated signature\nrecognizable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data\n (e.g. transaction) and use the signature to impersonate the victim.\n\nNote the address to sign with must be unlocked.\n",
								"returns": "Signature\n"
							},
							"parameters": [
								{
									"id": 244,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								},
								{
									"id": 245,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 246,
					"name": "eth_signTypedData",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1402,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 247,
							"name": "eth_signTypedData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "Signature. As in `eth_sign`, it is a hex encoded 129 byte array\nstarting with `0x`. It encodes the `r`, `s`, and `v` parameters from\nappendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n64...128 the `s` parameter, and the last byte the `v` parameter. Note\nthat the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).",
								"tags": [
									{
										"tag": "eip",
										"text": "[712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 248,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Address of the account that will sign the messages."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									}
								},
								{
									"id": 249,
									"name": "typedData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Typed structured data to be signed."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "MessageTypes"
											}
										],
										"name": "TypedMessage"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 163,
					"name": "eth_submitHashrate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 996,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 164,
							"name": "eth_submitHashrate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Used for submitting mining hashrate.",
								"returns": "`true` if submitting went through succesfully and `false` otherwise.\n"
							},
							"parameters": [
								{
									"id": 165,
									"name": "hashRate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a hexadecimal string representation (32 bytes) of the hash rate"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 166,
									"name": "clientID",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A random hexadecimal(32 bytes) ID identifying the client"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 158,
					"name": "eth_submitWork",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 984,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 159,
							"name": "eth_submitWork",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Used for submitting a proof-of-work solution",
								"returns": "`true` if the provided solution is valid, otherwise `false`.\n"
							},
							"parameters": [
								{
									"id": 160,
									"name": "nonce",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The nonce found (64 bits)"
									},
									"type": {
										"type": "reference",
										"name": "Data"
									}
								},
								{
									"id": 161,
									"name": "powHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The header's pow-hash (256 bits)"
									},
									"type": {
										"type": "reference",
										"name": "Data"
									}
								},
								{
									"id": 162,
									"name": "digest",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The mix digest (256 bits)"
									},
									"type": {
										"type": "reference",
										"name": "Data"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 250,
					"name": "eth_subscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1441,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 251,
							"name": "eth_subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Starts a subscription to a particular event. For every event that matches\nthe subscription a JSON-RPC notification with event details and\nsubscription ID will be sent to a client.",
								"returns": "A subscription id.\n"
							},
							"parameters": [
								{
									"id": 252,
									"name": "subscriptionName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "SubscriptionName"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "PromiEvent"
							}
						},
						{
							"id": 253,
							"name": "eth_subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Starts a subscription to a particular event. For every event that matches\nthe subscription a JSON-RPC notification with event details and\nsubscription ID will be sent to a client.",
								"returns": "A subscription id.\n"
							},
							"parameters": [
								{
									"id": 254,
									"name": "subscriptionName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "literal",
										"value": "logs"
									}
								},
								{
									"id": 255,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Filter options:\n * `address`: either an address or an array of addresses. Only logs that\n   are created from these addresses are returned\n * `topics`, only logs which match the specified topics"
									},
									"type": {
										"type": "reference",
										"name": "BaseFilterArgs"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "PromiEvent"
							}
						}
					]
				},
				{
					"id": 113,
					"name": "eth_syncing",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 806,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 114,
							"name": "eth_syncing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an object with data about the sync status or false.",
								"returns": "An object with sync status data or false, when not syncing:\n  startingBlock: {bigint} - The block at which the import started (will\n   only be reset, after the sync reached his head)\n  currentBlock: {bigint} - The current block, same as eth_blockNumber\n  highestBlock: {bigint} - The estimated highest block\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 269,
					"name": "eth_uninstallFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1700,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 270,
							"name": "eth_uninstallFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Uninstalls a filter with given id. Should always be called when watch is\nno longer needed.",
								"returns": "`true` if the filter was successfully uninstalled, otherwise\n`false`.\n"
							},
							"parameters": [
								{
									"id": 271,
									"name": "filterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the filter id."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 256,
					"name": "eth_unsubscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1566,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 257,
							"name": "eth_unsubscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 258,
									"name": "subscriptionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 64,
					"name": "evm_increaseTime",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 440,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 65,
							"name": "evm_increaseTime",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Jump forward in time by the given amount of time, in seconds.",
								"returns": "Returns the total time adjustment, in seconds.\n"
							},
							"parameters": [
								{
									"id": 66,
									"name": "seconds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Must be greater than or equal to `0`"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 79,
					"name": "evm_lockUnknownAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 590,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 80,
							"name": "evm_lockUnknownAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Locks any unknown account.",
								"text": "Note: accounts known to the `personal` namespace and accounts returned by\n`eth_accounts` cannot be locked using this method.\n",
								"returns": "`true` if the account was locked successfully, `false` if the\naccount was already locked. Throws an error if the account could not be\nlocked.\n"
							},
							"parameters": [
								{
									"id": 81,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "address the address of the account to lock"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 46,
					"name": "evm_mine",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 293,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 47,
							"name": "evm_mine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Force a single block to be mined.",
								"text": "Mines a block independent of whether or not mining is started or stopped.\nWill mine an empty block if there are no available transactions to mine.\n",
								"returns": "The string `\"0x0\"`. May return additional meta-data in the future.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nawait provider.send(\"evm_mine\", Date.now());\n```\n"
									},
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(\"start\", await provider.send(\"eth_blockNumber\"));\nawait provider.send(\"evm_mine\", [{blocks: 5}]); // mines 5 blocks\nconsole.log(\"end\", await provider.send(\"eth_blockNumber\"));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 48,
									"name": "timestamp",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "the timestamp the block should be mined with.\nEXPERIEMENTAL: Optionally, specify an `options` object with `timestamp`\nand/or `blocks` fields. If `blocks` is given, it will mine exactly `blocks`\n number of blocks, regardless of any other blocks mined or reverted during it's\noperation. This behavior is subject to change!\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "literal",
										"value": "0x0"
									}
								],
								"name": "Promise"
							}
						},
						{
							"id": 49,
							"name": "evm_mine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 50,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 51,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 53,
													"name": "blocks",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "ethereum/src/api.ts",
															"line": 296,
															"character": 10
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 52,
													"name": "timestamp",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "ethereum/src/api.ts",
															"line": 295,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														53,
														52
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "literal",
										"value": "0x0"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 70,
					"name": "evm_revert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 518,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 71,
							"name": "evm_revert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Revert the state of the blockchain to a previous snapshot. Takes a single\nparameter, which is the snapshot id to revert to. This deletes the given\nsnapshot, as well as any snapshots taken after (Ex: reverting to id 0x1\nwill delete snapshots with ids 0x1, 0x2, etc... If no snapshot id is\npassed it will revert to the latest snapshot.",
								"returns": "`true` if a snapshot was reverted, otherwise `false`\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst snapshotId = await provider.send(\"evm_snapshot\");\nconst isReverted = await provider.send(\"evm_revert\", [snapshotId]);\n```\n"
									},
									{
										"tag": "example",
										"text": "\n```javascript\nconst provider = ganache.provider();\nconst [from, to] = await provider.send(\"eth_accounts\");\nconst startingBalance = BigInt(await provider.send(\"eth_getBalance\", [from]));\n\n// take a snapshot\nconst snapshotId = await provider.send(\"evm_snapshot\");\n\n// send value to another account (over-simplified example)\nawait provider.send(\"eth_subscribe\", [\"newHeads\"]);\nawait provider.send(\"eth_sendTransaction\", [{from, to, value: \"0xffff\"}]);\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\n// ensure balance has updated\nconst newBalance = await provider.send(\"eth_getBalance\", [from]);\nassert(BigInt(newBalance) < startingBalance);\n\n// revert the snapshot\nconst isReverted = await provider.send(\"evm_revert\", [snapshotId]);\nassert(isReverted);\n\nconst endingBalance = await provider.send(\"eth_getBalance\", [from]);\nassert.strictEqual(BigInt(endingBalance), startingBalance);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 72,
									"name": "snapshotId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the snapshot id to revert"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 60,
					"name": "evm_setAccountNonce",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 404,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 61,
							"name": "evm_setAccountNonce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the given account's nonce to the specified value. Mines a new block\nbefore returning.",
								"text": "Warning: this will result in an invalid state tree.\n",
								"returns": "`true` if it worked\n"
							},
							"parameters": [
								{
									"id": 62,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 63,
									"name": "nonce",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 54,
					"name": "evm_setStorageAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "3",
								"max": "4"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 330,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 55,
							"name": "evm_setStorageAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 56,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 57,
									"name": "position",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "bigint"
											}
										]
									}
								},
								{
									"id": 58,
									"name": "storage",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 59,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Buffer"
											}
										]
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 67,
					"name": "evm_setTime",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0",
								"max": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 459,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 68,
							"name": "evm_setTime",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the internal clock time to the given timestamp.",
								"text": "Warning: This will allow you to move *backwards* in time, which may cause\nnew blocks to appear to be mined before old blocks. This is will result in\nan invalid state.\n",
								"returns": "The amount of *seconds* between the given timestamp and now.\n"
							},
							"parameters": [
								{
									"id": 69,
									"name": "time",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 73,
					"name": "evm_snapshot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 562,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "evm_snapshot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Snapshot the state of the blockchain at the current block. Takes no\nparameters. Returns the id of the snapshot that was created. A snapshot can\nonly be reverted once. After a successful `evm_revert`, the same snapshot\nid cannot be used again. Consider creating a new snapshot after each\n`evm_revert` if you need to revert to the same point multiple times.",
								"returns": "The hex-encoded identifier for this snapshot\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst snapshotId = await provider.send(\"evm_snapshot\");\n```\n"
									},
									{
										"tag": "example",
										"text": "\n```javascript\nconst provider = ganache.provider();\nconst [from, to] = await provider.send(\"eth_accounts\");\nconst startingBalance = BigInt(await provider.send(\"eth_getBalance\", [from]));\n\n// take a snapshot\nconst snapshotId = await provider.send(\"evm_snapshot\");\n\n// send value to another account (over-simplified example)\nawait provider.send(\"eth_subscribe\", [\"newHeads\"]);\nawait provider.send(\"eth_sendTransaction\", [{from, to, value: \"0xffff\"}]);\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\n// ensure balance has updated\nconst newBalance = await provider.send(\"eth_getBalance\", [from]);\nassert(BigInt(newBalance) < startingBalance);\n\n// revert the snapshot\nconst isReverted = await provider.send(\"evm_revert\", [snapshotId]);\nassert(isReverted);\n\nconst endingBalance = await provider.send(\"eth_getBalance\", [from]);\nassert.strictEqual(BigInt(endingBalance), startingBalance);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 75,
					"name": "evm_unlockUnknownAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 575,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 76,
							"name": "evm_unlockUnknownAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unlocks any unknown account.",
								"returns": "`true` if the account was unlocked successfully, `false` if the\naccount was already unlocked. Throws an error if the account could not be\nunlocked.\n"
							},
							"parameters": [
								{
									"id": 77,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "address the address of the account to unlock"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 78,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "(default: disabled) Duration in seconds how long the account\nshould remain unlocked for. Set to 0 to disable automatic locking."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 90,
					"name": "miner_setEtherbase",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 648,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 91,
							"name": "miner_setEtherbase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the etherbase, where mining rewards will go."
							},
							"parameters": [
								{
									"id": 92,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 93,
					"name": "miner_setExtra",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 658,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 94,
							"name": "miner_setExtra",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the extraData block header field a miner can include."
							},
							"parameters": [
								{
									"id": 95,
									"name": "extra",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 87,
					"name": "miner_setGasPrice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 638,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 88,
							"name": "miner_setGasPrice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 89,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sets the minimal accepted gas price when mining transactions.\nAny transactions that are below this limit are excluded from the mining\nprocess.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 82,
					"name": "miner_start",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0",
								"max": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 610,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 83,
							"name": "miner_start",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resume the CPU mining process with the given number of threads.",
								"text": "Note: `threads` is ignored.",
								"returns": "true\n"
							},
							"parameters": [
								{
									"id": 84,
									"name": "threads",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 85,
					"name": "miner_stop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 626,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 86,
							"name": "miner_stop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stop the CPU mining operation."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 103,
					"name": "net_listening",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 706,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 104,
							"name": "net_listening",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns `true` if client is actively listening for network connections.",
								"returns": "`true` when listening, otherwise `false`.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 105,
					"name": "net_peerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 715,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 106,
							"name": "net_peerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns number of peers currently connected to the client.",
								"returns": "integer of the number of connected peers.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 101,
					"name": "net_version",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 697,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 102,
							"name": "net_version",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current network id.",
								"returns": "The current network id. This value should NOT be JSON-RPC\nQuantity/Data encoded.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 319,
					"name": "personal_importRawKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1961,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 320,
							"name": "personal_importRawKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase.",
								"tags": [
									{
										"tag": "returnsreturns",
										"text": "the address of the new account.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 321,
									"name": "rawKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 322,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Address"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 314,
					"name": "personal_listAccounts",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1923,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 315,
							"name": "personal_listAccounts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns all the Ethereum account addresses of all keys that have been\nadded.",
								"returns": "the Ethereum account addresses of all keys that have been added.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 323,
					"name": "personal_lockAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1985,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 324,
							"name": "personal_lockAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Locks the account. The account can no longer be used to send transactions."
							},
							"parameters": [
								{
									"id": 325,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 316,
					"name": "personal_newAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1934,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 317,
							"name": "personal_newAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates a new account with private key. Returns the address of the new\naccount.",
								"returns": "The new account's address\n"
							},
							"parameters": [
								{
									"id": 318,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Address"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 331,
					"name": "personal_sendTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2030,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 332,
							"name": "personal_sendTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Validate the given passphrase and submit transaction.",
								"text": "The transaction is the same argument as for eth_sendTransaction and\ncontains the from address. If the passphrase can be used to decrypt the\nprivate key belogging to tx.from the transaction is verified, signed and\nsend onto the network. The account is not unlocked globally in the node\nand cannot be used in other RPC calls.\n"
							},
							"parameters": [
								{
									"id": 333,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 334,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 326,
					"name": "personal_unlockAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2",
								"max": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2005,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 327,
							"name": "personal_unlockAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unlocks the account for use.",
								"text": "The unencrypted key will be held in memory until the unlock duration\nexpires. The unlock duration defaults to 300 seconds. An explicit duration\nof zero seconds unlocks the key until geth exits.\n\nThe account can be used with eth_sign and eth_sendTransaction while it is\nunlocked.",
								"returns": "true if it worked. Throws an error if it did not.\n"
							},
							"parameters": [
								{
									"id": 328,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "20 Bytes - The address of the account to unlock."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 329,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Passphrase to unlock the account."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 330,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "(default: 300) Duration in seconds how long the account\nshould remain unlocked for. Set to 0 to disable automatic locking."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "300"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 335,
					"name": "rpc_modules",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2063,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 336,
							"name": "rpc_modules",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 337,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 338,
													"name": "eth",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 342,
													"name": "evm",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 339,
													"name": "net",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 343,
													"name": "personal",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 340,
													"name": "rpc",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 341,
													"name": "web3",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														338,
														342,
														339,
														343,
														340,
														341
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 351,
					"name": "shh_addToGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2108,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 352,
							"name": "shh_addToGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a whisper identity to the group",
								"returns": "true if the identity was successfully added to the group, otherwise false.\n"
							},
							"parameters": [
								{
									"id": 353,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 361,
					"name": "shh_getFilterChanges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2145,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 362,
							"name": "shh_getFilterChanges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Polling method for whisper filters. Returns new messages since the last call of this method.",
								"returns": "More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n"
							},
							"parameters": [
								{
									"id": 363,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The filter id. Ex: \"0x7\""
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 364,
					"name": "shh_getMessages",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2156,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 365,
							"name": "shh_getMessages",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.",
								"returns": "See: shh_getFilterChanges\n"
							},
							"parameters": [
								{
									"id": 366,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The filter id. Ex: \"0x7\""
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 346,
					"name": "shh_hasIdentity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2087,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 347,
							"name": "shh_hasIdentity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the client hold the private keys for a given identity.",
								"returns": "returns true if the client holds the privatekey for that identity, otherwise false.\n"
							},
							"parameters": [
								{
									"id": 348,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The identity address to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 354,
					"name": "shh_newFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2122,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 355,
							"name": "shh_newFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates filter to notify, when client receives whisper message matching the filter options.",
								"returns": "returns true if the identity was successfully added to the group, otherwise false.\n"
							},
							"parameters": [
								{
									"id": 356,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "-\n^(optional) Identity of the receiver. When present it will try to decrypt any incoming message\n if the client holds the private key to this identity."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 357,
									"name": "topics",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array of DATA topics which the incoming message's topics should match."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 349,
					"name": "shh_newGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2097,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 350,
							"name": "shh_newGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new group.",
								"returns": "the address of the new group.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 344,
					"name": "shh_newIdentity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2076,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 345,
							"name": "shh_newIdentity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates new whisper identity in the client.",
								"returns": "result - the address of the new identiy.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 367,
					"name": "shh_post",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2167,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 368,
							"name": "shh_post",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a whisper message and injects it into the network for distribution.",
								"returns": "returns true if the message was sent, otherwise false.\n"
							},
							"parameters": [
								{
									"id": 369,
									"name": "postData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 358,
					"name": "shh_uninstallFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2134,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 359,
							"name": "shh_uninstallFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Uninstalls a filter with given id. Should always be called when watch is no longer needed.\nAdditonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.",
								"returns": "true if the filter was successfully uninstalled, otherwise false.\n"
							},
							"parameters": [
								{
									"id": 360,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The filter id. Ex: \"0x7\""
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 370,
					"name": "shh_version",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2177,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 371,
							"name": "shh_version",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current whisper protocol version.",
								"returns": "The current whisper protocol version\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 96,
					"name": "web3_clientVersion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 675,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 97,
							"name": "web3_clientVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current client version.",
								"returns": "The current client version.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 98,
					"name": "web3_sha3",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 685,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 99,
							"name": "web3_sha3",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns Keccak-256 (not the standardized SHA3-256) of the given data.",
								"returns": "The SHA3 result of the given string.\n"
							},
							"parameters": [
								{
									"id": 100,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						21,
						18,
						19,
						15,
						22,
						20,
						23
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						42,
						44,
						38,
						29,
						33,
						24,
						306,
						173,
						175,
						302,
						177,
						115,
						107,
						171,
						179,
						121,
						117,
						128,
						125,
						183,
						131,
						266,
						272,
						285,
						187,
						133,
						137,
						192,
						298,
						210,
						147,
						151,
						141,
						144,
						155,
						169,
						167,
						259,
						263,
						261,
						111,
						239,
						236,
						242,
						246,
						163,
						158,
						250,
						113,
						269,
						256,
						64,
						79,
						46,
						70,
						60,
						54,
						67,
						73,
						75,
						90,
						93,
						87,
						82,
						85,
						103,
						105,
						101,
						319,
						314,
						323,
						316,
						331,
						326,
						335,
						351,
						361,
						364,
						346,
						354,
						349,
						344,
						367,
						358,
						370,
						96,
						98
					]
				}
			],
			"sources": [
				{
					"fileName": "ethereum/src/api.ts",
					"line": 151,
					"character": 32
				}
			],
			"indexSignature": {
				"id": 372,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"parameters": [
					{
						"id": 373,
						"name": "index",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "reflection",
					"declaration": {
						"id": 374,
						"name": "__type",
						"kind": 65536,
						"kindString": "Type literal",
						"flags": {},
						"sources": [
							{
								"fileName": "ethereum/src/api.ts",
								"line": 152,
								"character": 27
							}
						],
						"signatures": [
							{
								"id": 375,
								"name": "__type",
								"kind": 4096,
								"kindString": "Call signature",
								"flags": {},
								"parameters": [
									{
										"id": 376,
										"name": "args",
										"kind": 32768,
										"kindString": "Parameter",
										"flags": {
											"isRest": true
										},
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"type": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									],
									"name": "Promise"
								}
							}
						]
					}
				}
			},
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Api"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				1
			]
		}
	],
	"sources": [
		{
			"fileName": "ethereum/src/api.ts",
			"line": 1,
			"character": 0
		}
	]
}